// index.js
const { Client, GatewayIntentBits } = require('discord.js');
const { Pool } = require('pg');
const express = require('express');
const cors = require('cors');

// fetch –≤—Å—Ç—Ä–æ–µ–Ω –≤ Node.js 18+
const fetch = global.fetch;

// ===== Discord –∏ PostgreSQL =====
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.DirectMessages // –¥–ª—è –õ–°
  ],
  partials: ["CHANNEL"] // —á—Ç–æ–±—ã –±–æ—Ç –≤–∏–¥–µ–ª –õ–°
});

const BOT_TOKEN = process.env.BOT_TOKEN;
const DATABASE_URL = process.env.DATABASE_URL;
const ADMIN_ID = process.env.ADMIN_ID;

// ===== –í–µ–±—Ö—É–∫ –¥–ª—è –ª–æ–≥–æ–≤ =====
const LOG_WEBHOOK = "https://discord.com/api/webhooks/1414267869042053141/cg_p7zfGWSBTQyz2p-XCrs9OPIKPST29-xpxU1GRE7c9Unu8ipWDJvff6ODC69kNMJGF";

// —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤
async function sendLog(text) {
  try {
    await fetch(LOG_WEBHOOK, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ content: text })
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞:", err);
  }
}

const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã =====
async function initDB() {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS my_table (
      id SERIAL PRIMARY KEY,
      token TEXT NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `);
  console.log('Database initialized.');
  await sendLog("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
}
initDB().catch(err => {
  console.error(err);
  sendLog("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: " + err.message);
});

// ===== Express —Å–µ—Ä–≤–µ—Ä =====
const app = express();
app.use(cors()); 
app.use(express.json()); 

app.get('/', (req, res) => res.send('Bot is alive!'));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
app.get('/check/:token', async (req, res) => {
  try {
    const token = req.params.token;
    const result = await pool.query('SELECT 1 FROM my_table WHERE token=$1', [token]);
    res.json({ valid: result.rowCount > 0 });
  } catch (err) {
    console.error(err);
    await sendLog("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: " + err.message);
    res.status(500).json({ error: 'DB error' });
  }
});

// –û—Ç–¥–∞—á–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
app.post('/run', async (req, res) => {
  try {
    const { token } = req.body;
    const result = await pool.query('SELECT 1 FROM my_table WHERE token=$1', [token]);
    if (result.rowCount === 0) {
      await sendLog(`‚õî –ó–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º: ${token}`);
      return res.status(403).send('// –ö–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π');
    }

    const scriptUrl = 'https://bondyuk777.github.io/-/dadwadfafaf.js';
    const response = await fetch(scriptUrl);
    if (!response.ok) {
      await sendLog("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞");
      return res.status(500).send('// –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞');
    }
    const jsCode = await response.text();

    res.setHeader('Content-Type', 'application/javascript');
    res.send(jsCode);
    await sendLog(`üì§ –°–∫—Ä–∏–ø—Ç –æ—Ç–¥–∞–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${token}`);
  } catch (err) {
    console.error(err);
    await sendLog("‚ùå –û—à–∏–±–∫–∞ /run: " + err.message);
    res.status(500).send('// –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  sendLog(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// ===== –°–æ–±—ã—Ç–∏—è Discord-–±–æ—Ç–∞ =====
client.on('ready', () => {
  console.log(`Logged in as ${client.user.tag}!`);
  sendLog(`ü§ñ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è –∫–∞–∫ ${client.user.tag}`);
});

client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  // –ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
  if (message.author.id === ADMIN_ID) {
    const args = message.content.trim().split(/\s+/);
    const cmd = args.shift().toLowerCase();

    if (cmd === '!addtoken') {
      const token = args[0];
      if (!token) return message.author.send('–£–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω!');
      await pool.query('INSERT INTO my_table(token) VALUES($1)', [token]);
      await message.author.send(`‚úÖ –¢–æ–∫–µ–Ω ${token} –¥–æ–±–∞–≤–ª–µ–Ω.`);
      if (message.guild) message.reply('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–±–µ –≤ –õ–°.');
      await sendLog(`‚ûï –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–∏–ª —Ç–æ–∫–µ–Ω: ${token}`);
    }

    if (cmd === '!deltoken') {
      const token = args[0];
      if (!token) return message.author.send('–£–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω!');
      const res = await pool.query('DELETE FROM my_table WHERE token=$1', [token]);
      if (res.rowCount === 0) {
        await message.author.send('–¢–∞–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç!');
        return await sendLog(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω: ${token}`);
      }
      await message.author.send(`‚ùå –¢–æ–∫–µ–Ω ${token} —É–¥–∞–ª—ë–Ω.`);
      if (message.guild) message.reply('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–±–µ –≤ –õ–°.');
      await sendLog(`‚ûñ –ê–¥–º–∏–Ω —É–¥–∞–ª–∏–ª —Ç–æ–∫–µ–Ω: ${token}`);
    }

    if (cmd === '!listtokens') {
      const res = await pool.query('SELECT token FROM my_table');
      await message.author.send('üîë –¢–æ–∫–µ–Ω—ã: ' + (res.rows.map(r => r.token).join(', ') || '–Ω–µ—Ç'));
      if (message.guild) message.reply('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–±–µ –≤ –õ–°.');
      await sendLog("üìã –ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤");
    }
  }

  // –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø–∏—à–µ—Ç –≤ –õ–° (channel.type === 1)
  if (message.channel.type === 1) {
    try {
      await message.author.send(`–¢—ã –Ω–∞–ø–∏—Å–∞–ª –º–Ω–µ: "${message.content}"`);
      await sendLog(`üíå –õ–° –æ—Ç ${message.author.tag}: ${message.content}`);
    } catch (err) {
      console.error('–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°:', err);
      await sendLog(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –õ–° ${message.author.tag}: ${err.message}`);
    }
  }
});

client.login(BOT_TOKEN);

// ===== –°–∞–º–æ–ø–∏–Ω–≥, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª —Å–ª–∏—à–∫–æ–º –Ω–∞–¥–æ–ª–≥–æ =====
setInterval(() => {
  fetch(`https://adadadadad-97sj.onrender.com/check/1`).catch(() => {});
}, 5 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
