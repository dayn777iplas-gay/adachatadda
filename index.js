import {
  Client,
  GatewayIntentBits,
  EmbedBuilder,
  Partials
} from "discord.js";
import { Pool } from "pg";
import express from "express";
import cors from "cors";

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
const BOT_TOKEN = process.env.BOT_TOKEN;
const DATABASE_URL = process.env.DATABASE_URL;
const ADMIN_ID = process.env.ADMIN_ID;

const LOG_WEBHOOK_URL = "https://discord.com/api/webhooks/1427826300495855697/MtqkHw-X8jm7l8kbIxeVJHvBNcIPufZtxssqd2-wyljCggs9lGi4SMZZivbSckSw7xTU";

if (!BOT_TOKEN || !DATABASE_URL || !ADMIN_ID || !LOG_WEBHOOK_URL) {
  console.error("‚ùå BOT_TOKEN, DATABASE_URL, ADMIN_ID –∏ LOG_WEBHOOK_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã!");
  process.exit(1);
}

const fetch = global.fetch;

// === Discord –∫–ª–∏–µ–Ω—Ç ===
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.DirectMessages,
    GatewayIntentBits.MessageContent
  ],
  partials: [Partials.Channel]
});

// === Express ===
const app = express();
app.use(cors());
app.use(express.json());
app.get("/", (req, res) => res.send("Bot is running..."));

// === PostgreSQL ===
const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ===
async function initDB() {
  console.log("üß© –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS my_table (
        id SERIAL PRIMARY KEY,
        token TEXT UNIQUE NOT NULL,
        expires_at TIMESTAMP NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞");

    // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
    await pool.query("DELETE FROM my_table WHERE token='__test__';");
    await pool.query("INSERT INTO my_table(token, expires_at) VALUES($1, NOW() + interval '1 minute');", ["__test__"]);
    const check = await pool.query("SELECT * FROM my_table WHERE token='__test__';");
    if (check.rowCount === 1) console.log("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–æ—à–ª–∞");
    else console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ –±–∞–∑—É, –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É...");

    await pool.query("DELETE FROM my_table WHERE token='__test__';");
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:", e.message);
    console.log("üîÅ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É...");
    await pool.query("DROP TABLE IF EXISTS my_table;");
    await pool.query(`
      CREATE TABLE my_table (
        id SERIAL PRIMARY KEY,
        token TEXT UNIQUE NOT NULL,
        expires_at TIMESTAMP NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ");
  }
}

// === –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç—ë–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ ===
async function removeExpiredTokens() {
  const res = await pool.query("DELETE FROM my_table WHERE expires_at <= NOW() RETURNING token");
  for (const row of res.rows) {
    await sendLog("üïí –£–¥–∞–ª—ë–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω", `\`${row.token}\``, "#808080");
  }
}

// === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
function scheduleTokenDeletion(token, expiresAt) {
  const delay = expiresAt.getTime() - Date.now();
  if (delay <= 0) return;
  setTimeout(async () => {
    await pool.query("DELETE FROM my_table WHERE token=$1", [token]);
    await sendLog("üïí –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏", `–¢–æ–∫–µ–Ω: \`${token}\``, "#808080");
  }, delay);
}

// === –õ–æ–≥–≥–µ—Ä ===
async function sendLog(title, description, color = "#2f3136") {
  try {
    await fetch(LOG_WEBHOOK_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        embeds: [{
          title,
          description,
          color: parseInt(color.replace("#", ""), 16),
          timestamp: new Date().toISOString()
        }]
      })
    });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ª–æ–≥–≥–µ—Ä–∞:", e.message);
  }
}

// === –ö–æ–º–∞–Ω–¥—ã ===
client.on("messageCreate", async (message) => {
  if (message.author.bot) return;
  if (message.author.id !== ADMIN_ID) return;

  const args = message.content.trim().split(/\s+/);
  const cmd = args.shift()?.toLowerCase();

  try {
    // === !–≤—ã–¥–∞—Ç—å ===
    if (cmd === "!–≤—ã–¥–∞—Ç—å") {
      const token = args[0];
      if (!token) return message.reply("‚öôÔ∏è –§–æ—Ä–º–∞—Ç: `!–≤—ã–¥–∞—Ç—å <—Ç–æ–∫–µ–Ω>` (—Å—Ä–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 1 –º–µ—Å—è—Ü)");

      const expiresAt = new Date();
      expiresAt.setMonth(expiresAt.getMonth() + 1);

      try {
        await pool.query("INSERT INTO my_table(token, expires_at) VALUES($1, $2)", [token, expiresAt]);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", err.message);
        return message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î!");
      }

      const verify = await pool.query("SELECT token FROM my_table WHERE token=$1", [token]);
      if (verify.rowCount === 0) {
        return message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è (–æ—à–∏–±–∫–∞ –±–∞–∑—ã)");
      }

      scheduleTokenDeletion(token, expiresAt);

      const expiresString = expiresAt.toLocaleString("ru-RU", { timeZone: "Europe/Kiev" });
      const embed = new EmbedBuilder()
        .setTitle("‚úÖ –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω")
        .setDescription(`\`${token}\`\n–ò—Å—Ç–µ–∫–∞–µ—Ç: **${expiresString}**`)
        .setColor("#2f3136")
        .setTimestamp();

      await message.reply({ embeds: [embed] });
      await sendLog("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω", `\`${token}\`\n–ò—Å—Ç–µ–∫–∞–µ—Ç ${expiresString}\n–î–æ–±–∞–≤–∏–ª: <@${message.author.id}>`);
    }

    // === !—É–¥–∞–ª–∏—Ç—å ===
    if (cmd === "!—É–¥–∞–ª–∏—Ç—å") {
      const token = args[0];
      if (!token) return message.reply("‚öôÔ∏è –§–æ—Ä–º–∞—Ç: `!—É–¥–∞–ª–∏—Ç—å <—Ç–æ–∫–µ–Ω>`");
      const res = await pool.query("DELETE FROM my_table WHERE token=$1", [token]);
      const msg = res.rowCount ? `üóëÔ∏è \`${token}\` —É–¥–∞–ª—ë–Ω.` : `‚ö†Ô∏è \`${token}\` –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
      await message.reply(msg);
      await sendLog("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞", msg);
    }

    // === !–ª–∏—Å—Ç ===
    if (cmd === "!–ª–∏—Å—Ç") {
      await removeExpiredTokens();
      const res = await pool.query("SELECT token, expires_at FROM my_table ORDER BY id DESC");
      const list = res.rows.length
        ? res.rows.map(r => `‚Ä¢ \`${r.token}\`\n  ‚è∞ ${new Date(r.expires_at).toLocaleString("ru-RU")}`).join("\n\n")
        : "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.";
      const embed = new EmbedBuilder().setTitle("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤").setDescription(list).setColor("#2f3136");
      await message.reply({ embeds: [embed] });
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã:", err);
    await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.");
  }
});

// === –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===
client.once("ready", async () => {
  console.log(`ü§ñ Logged in as ${client.user.tag}`);
  await sendLog("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", new Date().toLocaleString("ru-RU"));
  const res = await pool.query("SELECT token, expires_at FROM my_table");
  for (const row of res.rows) {
    if (row.expires_at) scheduleTokenDeletion(row.token, new Date(row.expires_at));
  }
});

// === –≠–Ω–¥–ø–æ–∏–Ω—Ç /check ===
app.get("/check/:token", async (req, res) => {
  const token = req.params.token;
  const result = await pool.query("SELECT 1 FROM my_table WHERE token=$1", [token]);
  res.json({ valid: result.rowCount > 0 });
});

// === –°–∞–º–æ–ø–∏–Ω–≥ ===
setInterval(() => {
  fetch("https://adadadadad-97sj.onrender.com/check/1").catch(() => {});
}, 5 * 60 * 1000);

// === –ó–∞–ø—É—Å–∫ ===
await initDB();
app.listen(process.env.PORT || 3000, () => console.log("‚úÖ Server ready"));
client.login(BOT_TOKEN);
