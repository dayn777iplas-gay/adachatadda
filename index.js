// index.js
const { Client, GatewayIntentBits } = require('discord.js');
const { Pool } = require('pg');
const express = require('express');
const cors = require('cors');

// fetch –≤—Å—Ç—Ä–æ–µ–Ω –≤ Node.js 18+
const fetch = global.fetch;

// ===== –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∫–∏ —Å—Å—ã–ª–æ–∫ =====
(function () {
  const key = 'a'.charCodeAt(0) - 55; // 42

  function decode(arr) {
    return arr.map(c => String.fromCharCode(c ^ key)).join('');
  }

  const parts = {
    webhook: [
      82, 82, 82, 94, 94, 89, 94, 94, 94, 87, 82, 89, 94, 89, 94, 82, 82, 82,
      91, 82, 95, 86, 84, 86, 95, 94, 91, 86, 82, 82, 95, 82, 90, 82, 82, 95,
      86, 82, 84, 82, 95, 95, 91, 95, 94, 82, 86, 95, 84, 84, 95, 94, 82, 82,
      95, 94, 91, 95, 95, 82, 86, 91, 95, 91, 95, 82, 86, 84, 82, 91, 94, 91,
      95, 94, 82, 84, 91, 91, 82, 95, 86, 95, 91, 86, 95, 82, 84, 82, 91, 91,
      82, 95, 86, 95, 91, 86, 95, 82, 84, 91, 91, 82, 95, 82, 82, 95, 94, 82,
      95, 82, 82, 95, 86, 91, 95, 91, 95, 82, 84, 91, 91, 82, 95, 82, 82, 95,
      94, 82, 95, 91, 91, 95, 82, 86, 95, 82, 84, 82, 91, 95, 82, 95, 82, 84,
      95, 82, 84, 91, 82, 84, 91, 91, 82, 91, 95, 91, 82, 84, 95, 82, 82, 91,
      82, 91, 82, 84, 82, 91, 82, 91, 95, 82, 84, 91, 82, 84, 91, 91, 82, 91,
      82, 82, 95, 82, 95, 91, 82, 95, 82, 95, 91, 91, 82, 91, 82, 84, 82, 95,
      82, 82, 91, 82, 91, 91, 82, 84, 91, 95, 82, 91, 91, 82, 82, 91, 91, 82,
      91, 91, 82, 84, 91, 82, 95, 91, 91, 82, 84, 95, 82, 91, 82, 84, 95, 91,
      95, 91, 82, 95, 82, 84, 91, 91, 82, 95, 82, 84, 91, 91, 82, 84, 91, 95,
      91, 91, 82, 91, 82, 95, 91, 91, 82, 95, 82, 82, 91, 91, 95, 91, 82, 91,
      91, 95, 91, 91, 95, 91, 91, 82, 84, 91, 91, 95, 91, 82, 95, 82, 91, 82,
      84, 91, 91, 82, 91, 91, 95, 91, 95, 91, 82, 84, 91, 91, 95, 91, 82, 91,
      91, 95, 91, 95, 91, 82, 84, 91, 91, 95, 91, 82, 91, 91, 95, 91, 95, 91,
      82, 84, 91, 91, 95, 91, 82, 91, 91, 95, 91, 95, 91, 82, 84, 91, 91, 95,
      91, 82, 91, 91, 95, 91, 95, 91
    ],
    github: [
      82, 82, 82, 94, 94, 89, 94, 94, 94, 87, 82, 89, 94, 89, 94, 82, 82, 82,
      91, 82, 95, 86, 84, 86, 95, 94, 91, 86, 82, 82, 95, 82, 90, 82, 82, 95,
      86, 82, 84, 82, 95, 95, 91, 95, 94, 82, 86, 95, 84, 84, 95, 94, 82, 82,
      95, 94, 91, 95, 95, 82, 86, 91, 95, 91, 95, 82, 86, 84, 82, 91, 94, 91,
      95, 94, 82, 84, 91, 91, 82, 95, 86, 95, 91, 86, 95, 82, 84, 82, 91, 91,
      82, 95, 86, 95, 91, 86, 95, 82, 84, 91, 91, 82, 95, 82, 82, 95, 94, 82,
      95, 82, 82, 95, 86, 91, 95, 91, 95, 82, 84, 91, 91, 82, 95, 82, 82, 95,
      94, 82, 95, 91, 91, 95, 82, 86, 95, 82, 84, 82, 91, 95, 82, 95, 82, 84,
      95, 82, 84, 91, 82, 84, 91, 91, 82, 91, 95, 91, 82, 84, 95, 82, 82, 91,
      82, 91, 82, 84, 82, 91, 82, 91, 95, 82, 84, 91, 82, 84, 91, 91, 82, 91,
      82, 82, 95, 82, 95, 91, 82, 95, 82, 95, 91, 91, 82, 91, 82, 84, 82, 95,
      82, 82, 91, 82, 91, 91, 82, 84, 91, 95, 82, 91, 91, 82, 82, 91, 91, 82,
      91, 91, 82, 84, 91, 82, 95, 91, 91, 82, 84, 95, 82, 91, 82, 84, 95, 91,
      95, 91, 82, 95, 82, 84, 91, 91, 82, 95, 82, 84, 91, 91, 82, 84, 91, 95,
      91, 91, 82, 91, 82, 95, 91, 91, 82, 95, 82, 82, 91, 91, 95, 91, 82, 91,
      91, 95, 91, 91, 95, 91, 91, 82, 84, 91, 91, 95, 91, 82, 95, 82, 91, 82,
      84, 91, 91, 82, 91, 91, 95, 91, 95, 91, 82, 84, 91, 91, 95, 91, 82, 91,
      91, 95, 91, 95, 91, 82, 84, 91, 91, 95, 91, 82, 91, 91, 95, 91, 95, 91,
      82, 84, 91, 91, 95, 91, 82, 91, 91, 95, 91, 95, 91, 82, 84, 91, 91, 95,
      91, 82, 91, 91, 95, 91, 95, 91
    ],
    render: [
      82, 82, 82, 94, 94, 89, 94, 94, 94, 87, 82, 89, 94, 89, 94, 82, 82, 82,
      91, 82, 95, 86, 84, 86, 95, 94, 91, 86, 82, 82, 95, 82, 90, 82, 82, 95,
      86, 82, 84, 82, 95, 95, 91, 95, 94, 82, 86, 95, 84, 84, 95, 94, 82, 82,
      95, 94, 91, 95, 95, 82, 86, 91, 95, 91, 95, 82, 86, 84, 82, 91, 94, 91,
      95, 94, 82, 84, 91, 91, 82, 95, 86, 95, 91, 86, 95, 82, 84, 82, 91, 91,
      82, 95, 86, 95, 91, 86, 95, 82, 84, 91, 91, 82, 95, 82, 82, 95, 94, 82,
      95, 82, 82, 95, 86, 91, 95, 91, 95, 82, 84, 91, 91, 82, 95, 82, 82, 95,
      94, 82, 95, 91, 91, 95, 82, 86, 95, 82, 84, 82, 91, 95, 82, 95, 82, 84,
      95, 82, 84, 91, 82, 84, 91, 91, 82, 91, 95, 91, 82, 84, 95, 82, 82, 91,
      82, 91, 82, 84, 82, 91, 82, 91, 95, 82, 84, 91, 82, 84, 91, 91, 82, 91,
      82, 82, 95, 82, 95, 91, 82, 95, 82, 95, 91, 91, 82, 91, 82, 84, 82, 95,
      82, 82, 91, 82, 91, 91, 82, 84, 91, 95, 82, 91, 91, 82, 82, 91, 91, 82,
      91, 91, 82, 84, 91, 82, 95, 91, 91, 82, 84, 95, 82, 91, 82, 84, 95, 91,
      95, 91, 82, 95, 82, 84, 91, 91, 82, 95, 82, 84, 91, 91, 82, 84, 91, 95,
      91, 91, 82, 91, 82, 95, 91, 91, 82, 95, 82, 82, 91, 91, 95, 91, 82, 91,
      91, 95, 91, 91, 95, 91, 91, 82, 84, 91, 91, 95, 91, 82, 95, 82, 91, 82,
      84, 91, 91, 82, 91, 91, 95, 91, 95, 91, 82, 84, 91, 91, 95, 91, 82, 91,
      91, 95, 91, 95, 91, 82, 84, 91, 91, 95, 91, 82, 91, 91, 95, 91, 95, 91,
      82, 84, 91, 91, 95, 91, 82, 91, 91, 95, 91, 95, 91, 82, 84, 91, 91, 95,
      91, 82, 91, 91, 95, 91, 95, 91
    ]
  };

  global.LOG_WEBHOOK = decode(parts.webhook);
  global.SCRIPT_URL = decode(parts.github);
  global.RENDER_URL = decode(parts.render);
})();

// ===== Discord –∏ PostgreSQL =====
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.DirectMessages
  ],
  partials: ['CHANNEL']
});

const BOT_TOKEN = process.env.BOT_TOKEN;
const DATABASE_URL = process.env.DATABASE_URL;
const ADMIN_ID = process.env.ADMIN_ID;

// —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤
async function sendLog(text) {
  try {
    await fetch(global.LOG_WEBHOOK, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ content: text })
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞:', err);
  }
}

const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã =====
async function initDB() {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS my_table (
      id SERIAL PRIMARY KEY,
      token TEXT NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `);
  console.log('Database initialized.');
  await sendLog('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.');
}
initDB().catch(err => {
  console.error(err);
  sendLog('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: ' + err.message);
});

// ===== Express —Å–µ—Ä–≤–µ—Ä =====
const app = express();
app.use(cors());
app.use(express.json());

app.get('/', (req, res) => res.send('Bot is alive!'));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
app.get('/check/:token', async (req, res) => {
  const ip = req.headers['x-forwarded-for'] || req.socket.remoteAddress;
  try {
    const token = req.params.token;
    const result = await pool.query('SELECT 1 FROM my_table WHERE token=$1', [
      token
    ]);
    const valid = result.rowCount > 0;
    res.json({ valid });

    await sendLog(`üîé /check –∑–∞–ø—Ä–æ—Å: token=${token}, valid=${valid}, IP=${ip}`);
  } catch (err) {
    console.error(err);
    await sendLog(`‚ùå –û—à–∏–±–∫–∞ /check –æ—Ç IP=${ip}: ${err.message}`);
    res.status(500).json({ error: 'DB error' });
  }
});

// –û—Ç–¥–∞—á–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
app.post('/run', async (req, res) => {
  const ip = req.headers['x-forwarded-for'] || req.socket.remoteAddress;
  try {
    const { token } = req.body;
    const result = await pool.query('SELECT 1 FROM my_table WHERE token=$1', [
      token
    ]);
    if (result.rowCount === 0) {
      await sendLog(`‚õî /run ‚Üí –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: ${token}, IP=${ip}`);
      return res.status(403).send('// –ö–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π');
    }

    const response = await fetch(global.SCRIPT_URL);
    const scriptText = await response.text();
    res.set('Content-Type', 'application/javascript');
    res.send(scriptText);

    await sendLog(`‚ñ∂Ô∏è /run —É—Å–ø–µ—à–µ–Ω: token=${token}, IP=${ip}`);
  } catch (err) {
    console.error(err);
    await sendLog(`‚ùå –û—à–∏–±–∫–∞ /run –æ—Ç IP=${ip}: ${err.message}`);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞' });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${PORT}`));

// ===== Discord –ª–æ–≥–∏–∫–∞ =====
client.once('ready', () => {
  console.log(`–ë–æ—Ç –≤–æ—à–µ–ª –∫–∞–∫ ${client.user.tag}`);
  sendLog(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);
});

client.on('messageCreate', async message => {
  if (message.author.bot) return;

  const isAdmin = message.author.id === ADMIN_ID;
  if (!isAdmin) return;

  if (message.content.startsWith('!add')) {
    const token = message.content.split(' ')[1];
    if (!token) return message.reply('‚ùå –£–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω: !add <token>');

    try {
      await pool.query('INSERT INTO my_table(token) VALUES($1)', [token]);
      await sendLog(`‚ûï –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω: ${token} (–∞–¥–º–∏–Ω ${message.author.tag})`);
      message.reply(`‚úÖ –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω: ${token}`);
    } catch (err) {
      console.error(err);
      message.reply('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞.');
    }
  }

  if (message.content === '!list') {
    try {
      const result = await pool.query('SELECT * FROM my_table');
      const tokens = result.rows
        .map(row => `${row.id}: ${row.token} (${row.created_at})`)
        .join('\n');
      message.reply('üìú –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤:\n' + (tokens || '‚Äî –ø—É—Å—Ç–æ ‚Äî'));
    } catch (err) {
      console.error(err);
      message.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤.');
    }
  }
});

client.login(BOT_TOKEN);

// ===== –ü–∏–Ω–≥ Render =====
setInterval(async () => {
  try {
    await fetch(global.RENDER_URL);
    console.log('Ping OK');
  } catch (err) {
    console.error('Ping failed', err);
  }
}, 5 * 60 * 1000);
