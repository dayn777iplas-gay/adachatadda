// index.js
import { Client, GatewayIntentBits, REST, Routes, EmbedBuilder } from "discord.js";
import { Pool } from "pg";
import express from "express";
import cors from "cors";

const fetch = global.fetch;

// ===== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è =====
const BOT_TOKEN = process.env.BOT_TOKEN;
const DATABASE_URL = process.env.DATABASE_URL;
const ADMIN_ID = process.env.ADMIN_ID;

// ===== Discord –∫–ª–∏–µ–Ω—Ç =====
const client = new Client({
  intents: [GatewayIntentBits.Guilds],
});

const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: { rejectUnauthorized: false },
});

// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î =====
async function initDB() {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS my_table (
      id SERIAL PRIMARY KEY,
      token TEXT NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `);
  console.log("Database initialized.");
}

// ===== Express —Å–µ—Ä–≤–µ—Ä =====
const app = express();
app.use(cors());
app.use(express.json());

app.get("/", (req, res) => res.send("Bot is running..."));

app.get("/check/:token", async (req, res) => {
  try {
    const { token } = req.params;
    const result = await pool.query("SELECT 1 FROM my_table WHERE token=$1", [token]);
    res.json({ valid: result.rowCount > 0 });
  } catch {
    res.status(500).json({ error: "DB error" });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

// ===== Slash-–∫–æ–º–∞–Ω–¥—ã =====
const commands = [
  {
    name: "addtoken",
    description: "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É",
    options: [
      {
        name: "token",
        description: "–¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å",
        type: 3,
        required: true,
      },
    ],
  },
  {
    name: "deltoken",
    description: "–£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã",
    options: [
      {
        name: "token",
        description: "–¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å",
        type: 3,
        required: true,
      },
    ],
  },
  {
    name: "listtokens",
    description: "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –≤ –±–∞–∑–µ",
  },
];

// ===== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Slash-–∫–æ–º–∞–Ω–¥ =====
client.once("ready", async () => {
  console.log(`Logged in as ${client.user.tag}`);

  const rest = new REST({ version: "10" }).setToken(BOT_TOKEN);
  try {
    await rest.put(Routes.applicationCommands(client.user.id), { body: commands });
    console.log("Slash-–∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:", err);
  }
});

// ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ =====
client.on("interactionCreate", async (interaction) => {
  if (!interaction.isChatInputCommand()) return;
  if (interaction.user.id !== ADMIN_ID) return; // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö, –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞

  const { commandName } = interaction;

  if (commandName === "addtoken") {
    const token = interaction.options.getString("token");
    await pool.query("INSERT INTO my_table(token) VALUES($1)", [token]);

    const embed = new EmbedBuilder()
      .setTitle("‚úÖ –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω")
      .setDescription(`–¢–æ–∫–µ–Ω \`${token}\` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.`)
      .setColor("#2f3136")
      .setTimestamp();

    await interaction.reply({ embeds: [embed], ephemeral: true });
  }

  if (commandName === "deltoken") {
    const token = interaction.options.getString("token");
    const res = await pool.query("DELETE FROM my_table WHERE token=$1", [token]);

    const embed = new EmbedBuilder()
      .setTitle(res.rowCount ? "üóëÔ∏è –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω" : "‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
      .setDescription(
        res.rowCount
          ? `–¢–æ–∫–µ–Ω \`${token}\` –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã.`
          : `–¢–æ–∫–µ–Ω \`${token}\` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.`
      )
      .setColor("#2f3136")
      .setTimestamp();

    await interaction.reply({ embeds: [embed], ephemeral: true });
  }

  if (commandName === "listtokens") {
    const res = await pool.query("SELECT token FROM my_table ORDER BY id DESC");
    const tokens = res.rows.map((r) => `‚Ä¢ ${r.token}`).join("\n") || "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.";

    const embed = new EmbedBuilder()
      .setTitle("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤")
      .setDescription(tokens)
      .setColor("#2f3136")
      .setTimestamp();

    await interaction.reply({ embeds: [embed], ephemeral: true });
  }
});

// ===== –°–∞–º–æ–ø–∏–Ω–≥, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª =====
setInterval(() => {
  fetch(`https://adadadadad-97sj.onrender.com/check/1`).catch(() => {});
}, 5 * 60 * 1000);

// ===== –ó–∞–ø—É—Å–∫ =====
await initDB();
client.login(BOT_TOKEN);
