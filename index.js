// index.js
import {
  Client,
  GatewayIntentBits,
  REST,
  Routes,
  EmbedBuilder
} from "discord.js";
import { Pool } from "pg";
import express from "express";
import cors from "cors";

const fetch = global.fetch;

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
const BOT_TOKEN = process.env.BOT_TOKEN;
const DATABASE_URL = process.env.DATABASE_URL;
const ADMIN_ID = process.env.ADMIN_ID;

// === Discord –∫–ª–∏–µ–Ω—Ç ===
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.DirectMessages,
    GatewayIntentBits.MessageContent
  ],
  partials: ["CHANNEL"]
});

// === PostgreSQL ===
const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// === Express —Å–µ—Ä–≤–µ—Ä ===
const app = express();
app.use(cors());
app.use(express.json());
app.get("/", (req, res) => res.send("Bot is running..."));
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ===
async function initDB() {
  // —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –Ω–µ—Ç
  await pool.query(`
    CREATE TABLE IF NOT EXISTS my_table (
      id SERIAL PRIMARY KEY,
      token TEXT NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // üîß –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
  await pool.query(`
    DO $$
    BEGIN
      BEGIN
        ALTER TABLE my_table ADD COLUMN expires_at TIMESTAMP;
      EXCEPTION WHEN duplicate_column THEN NULL;
      END;
      BEGIN
        ALTER TABLE my_table ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
      EXCEPTION WHEN duplicate_column THEN NULL;
      END;
    END$$;
  `);

  console.log("Database initialized.");
  await removeExpiredTokens();
}

// === –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ ===
async function removeExpiredTokens() {
  const now = new Date();
  await pool.query("DELETE FROM my_table WHERE expires_at <= $1", [now]);
}

// === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è ===
async function scheduleTokenDeletion(token, expiresAt) {
  const delay = expiresAt.getTime() - Date.now();
  if (delay <= 0) return;
  setTimeout(async () => {
    await pool.query("DELETE FROM my_table WHERE token=$1", [token]);
    console.log(`Token ${token} expired and deleted.`);
  }, delay);
}

// === Slash-–∫–æ–º–∞–Ω–¥—ã ===
const commands = [
  {
    name: "addtoken",
    description: "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω",
    options: [
      {
        name: "token",
        description: "–¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å",
        type: 3,
        required: true
      },
      {
        name: "expires",
        description: "–ö–æ–≥–¥–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 16.10.2025 23:30)",
        type: 3,
        required: true
      }
    ]
  },
  {
    name: "deltoken",
    description: "–£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω",
    options: [
      {
        name: "token",
        description: "–¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å",
        type: 3,
        required: true
      }
    ]
  },
  { name: "listtokens", description: "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã" }
];

// === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Slash-–∫–æ–º–∞–Ω–¥ ===
client.once("ready", async () => {
  console.log(`Logged in as ${client.user.tag}`);
  const rest = new REST({ version: "10" }).setToken(BOT_TOKEN);
  try {
    await rest.put(Routes.applicationCommands(client.user.id), { body: commands });
    console.log("Slash-–∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:", err);
  }

  const res = await pool.query("SELECT token, expires_at FROM my_table");
  for (const row of res.rows) {
    if (row.expires_at) scheduleTokenDeletion(row.token, new Date(row.expires_at));
  }
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ Slash-–∫–æ–º–∞–Ω–¥ ===
client.on("interactionCreate", async (interaction) => {
  if (!interaction.isChatInputCommand()) return;
  if (interaction.user.id !== ADMIN_ID) return;

  const { commandName } = interaction;

  if (commandName === "addtoken") {
    const token = interaction.options.getString("token");
    const expiresInput = interaction.options.getString("expires");
    const match = expiresInput.match(/^(\d{2})\.(\d{2})\.(\d{4})\s+(\d{2}):(\d{2})$/);
    if (!match)
      return interaction.reply({
        content: "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä `16.10.2025 23:30`).",
        ephemeral: true
      });

    const [_, d, m, y, h, min] = match;
    const expiresAt = new Date(`${y}-${m}-${d}T${h}:${min}:00`);
    await pool.query("INSERT INTO my_table(token, expires_at) VALUES($1,$2)", [token, expiresAt]);
    scheduleTokenDeletion(token, expiresAt);

    const embed = new EmbedBuilder()
      .setTitle("‚úÖ –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω")
      .setDescription(`–¢–æ–∫–µ–Ω \`${token}\` –¥–æ–±–∞–≤–ª–µ–Ω.\n–ò—Å—Ç–µ–∫–∞–µ—Ç: **${expiresInput}**`)
      .setColor("#2f3136")
      .setTimestamp();
    await interaction.reply({ embeds: [embed], ephemeral: true });
  }

  if (commandName === "deltoken") {
    const token = interaction.options.getString("token");
    const res = await pool.query("DELETE FROM my_table WHERE token=$1", [token]);
    const embed = new EmbedBuilder()
      .setTitle(res.rowCount ? "üóëÔ∏è –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω" : "‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
      .setDescription(res.rowCount ? `–¢–æ–∫–µ–Ω \`${token}\` –±—ã–ª —É–¥–∞–ª—ë–Ω.` : `–¢–æ–∫–µ–Ω \`${token}\` –Ω–µ –Ω–∞–π–¥–µ–Ω.`)
      .setColor("#2f3136")
      .setTimestamp();
    await interaction.reply({ embeds: [embed], ephemeral: true });
  }

  if (commandName === "listtokens") {
    await removeExpiredTokens();
    const res = await pool.query("SELECT token, expires_at FROM my_table ORDER BY id DESC");
    const list = res.rows.length
      ? res.rows.map(r => `‚Ä¢ \`${r.token}\`\n  ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${r.expires_at ? new Date(r.expires_at).toLocaleString("ru-RU") : "‚Äî"}`).join("\n\n")
      : "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.";

    const embed = new EmbedBuilder()
      .setTitle("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤")
      .setDescription(list)
      .setColor("#2f3136")
      .setTimestamp();
    await interaction.reply({ embeds: [embed], ephemeral: true });
  }
});

// === DM-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
client.on("messageCreate", async (message) => {
  if (message.author.bot || message.author.id !== ADMIN_ID || message.channel.type !== 1) return;

  const args = message.content.trim().split(/\s+/);
  const cmd = args.shift()?.toLowerCase();

  if (cmd === "addtoken") {
    const token = args[0];
    const expiresInput = args.slice(1).join(" ");
    if (!token || !expiresInput)
      return message.reply("‚ùó –§–æ—Ä–º–∞—Ç: `addtoken <—Ç–æ–∫–µ–Ω> <–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú>`");

    const match = expiresInput.match(/^(\d{2})\.(\d{2})\.(\d{4})\s+(\d{2}):(\d{2})$/);
    if (!match) return message.reply("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`.");
    const [_, d, m, y, h, min] = match;
    const expiresAt = new Date(`${y}-${m}-${d}T${h}:${min}:00`);
    await pool.query("INSERT INTO my_table(token, expires_at) VALUES($1,$2)", [token, expiresAt]);
    scheduleTokenDeletion(token, expiresAt);

    const embed = new EmbedBuilder()
      .setTitle("‚úÖ –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω")
      .setDescription(`–¢–æ–∫–µ–Ω \`${token}\` –¥–æ–±–∞–≤–ª–µ–Ω.\n–ò—Å—Ç–µ–∫–∞–µ—Ç: **${expiresInput}**`)
      .setColor("#2f3136")
      .setTimestamp();
    await message.reply({ embeds: [embed] });
  }

  if (cmd === "deltoken") {
    const token = args[0];
    if (!token) return message.reply("‚ùó –§–æ—Ä–º–∞—Ç: `deltoken <—Ç–æ–∫–µ–Ω>`");
    const res = await pool.query("DELETE FROM my_table WHERE token=$1", [token]);
    const embed = new EmbedBuilder()
      .setTitle(res.rowCount ? "üóëÔ∏è –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω" : "‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
      .setDescription(res.rowCount ? `–¢–æ–∫–µ–Ω \`${token}\` –±—ã–ª —É–¥–∞–ª—ë–Ω.` : `–¢–æ–∫–µ–Ω \`${token}\` –Ω–µ –Ω–∞–π–¥–µ–Ω.`)
      .setColor("#2f3136")
      .setTimestamp();
    await message.reply({ embeds: [embed] });
  }

  if (cmd === "listtokens") {
    await removeExpiredTokens();
    const res = await pool.query("SELECT token, expires_at FROM my_table ORDER BY id DESC");
    const list = res.rows.length
      ? res.rows.map(r => `‚Ä¢ \`${r.token}\`\n  ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${r.expires_at ? new Date(r.expires_at).toLocaleString("ru-RU") : "‚Äî"}`).join("\n\n")
      : "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.";
    const embed = new EmbedBuilder()
      .setTitle("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤")
      .setDescription(list)
      .setColor("#2f3136")
      .setTimestamp();
    await message.reply({ embeds: [embed] });
  }
});

// === –°–∞–º–æ–ø–∏–Ω–≥ (–¥–ª—è Render) ===
setInterval(() => {
  fetch(`https://adadadadad-97sj.onrender.com/check/1`).catch(() => {});
}, 5 * 60 * 1000);

// === –ó–∞–ø—É—Å–∫ ===
await initDB();
client.login(BOT_TOKEN);
