import {
  Client,
  GatewayIntentBits,
  EmbedBuilder,
  Partials
} from "discord.js";
import { Pool } from "pg";
import express from "express";
import cors from "cors";

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
const BOT_TOKEN = process.env.BOT_TOKEN;
const DATABASE_URL = process.env.DATABASE_URL;
const ADMIN_ID = process.env.ADMIN_ID;

// üëá –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ–±—Ö—É–∫
const LOG_WEBHOOK_URL = "https://discord.com/api/webhooks/1427826300495855697/MtqkHw-X8jm7l8kbIxeVJHvBNcIPufZtxssqd2-wyljCggs9lGi4SMZZivbSckSw7xTU";

if (!BOT_TOKEN || !DATABASE_URL || !ADMIN_ID || !LOG_WEBHOOK_URL) {
  console.error("‚ùå BOT_TOKEN, DATABASE_URL, ADMIN_ID –∏ LOG_WEBHOOK_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã!");
  process.exit(1);
}

const fetch = global.fetch;

// === Discord –∫–ª–∏–µ–Ω—Ç ===
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.DirectMessages,
    GatewayIntentBits.MessageContent
  ],
  partials: [Partials.Channel]
});

// === Express –¥–ª—è Render ===
const app = express();
app.use(cors());
app.use(express.json());
app.get("/", (req, res) => res.send("Bot is running..."));
// === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true/false) ===
app.get("/check/:token", async (req, res) => {
  const ip = req.headers["x-forwarded-for"] || req.socket.remoteAddress;

  try {
    const token = req.params.token;
    const result = await pool.query("SELECT 1 FROM my_table WHERE token=$1", [token]);
    const valid = result.rowCount > 0;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    res.json({ valid });

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ç–æ–∫–µ–Ω–∞ "1"
    if (token !== "1") {
      await sendLog(
        "üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞",
        `–¢–æ–∫–µ–Ω: \`${token}\`\nIP: ${ip}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: **${valid ? "‚úÖ true" : "‚ùå false"}**`
      );
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", err);
    if (req.params.token !== "1") {
      await sendLog("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞", `IP: ${ip}\n–û—à–∏–±–∫–∞: ${err.message}`);
    }
    res.status(500).json({ error: "DB error" });
  }
});

// === –û—Ç–¥–∞—á–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ ===
app.post("/run", async (req, res) => {
  const ip = req.headers["x-forwarded-for"] || req.socket.remoteAddress;
  try {
    const { token } = req.body;
    if (!token) return res.status(400).send("// –¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω");

    const result = await pool.query("SELECT 1 FROM my_table WHERE token=$1", [token]);
    const valid = result.rowCount > 0;

    if (!valid) {
      if (token !== "1") {
        await sendLog(`‚õî /run ‚Üí –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: ${token}, IP=${ip}`);
      }
      return res.status(403).send("// –ö–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π");
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π JS —Å GitHub
    const scriptUrl = "https://bondyuk777.github.io/-/dadwadfafaf.js";
    const response = await fetch(scriptUrl);
    if (!response.ok) {
      if (token !== "1") {
        await sendLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ (IP=${ip})`);
      }
      return res.status(500).send("// –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞");
    }

    const jsCode = await response.text();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ JS
    res.setHeader("Content-Type", "application/javascript");
    res.send(jsCode);

    if (token !== "1") {
      await sendLog(`üì§ /run —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å: token=${token}, IP=${ip}`);
    }
  } catch (err) {
    console.error(err);
    if (req.body?.token !== "1") {
      await sendLog(`‚ùå –û—à–∏–±–∫–∞ /run –æ—Ç IP=${ip}: ${err.message}`);
    }
    res.status(500).send("// –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }
});


app.listen(process.env.PORT || 3000, () => console.log("‚úÖ Server ready"));

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ===
const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// === –õ–æ–≥–≥–µ—Ä —á–µ—Ä–µ–∑ Discord webhook ===
async function sendLog(title, description, color = "#2f3136") {
  try {
    const embed = {
      title,
      description,
      color: parseInt(color.replace("#", ""), 16),
      timestamp: new Date().toISOString()
    };
    await fetch(LOG_WEBHOOK_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ embeds: [embed] })
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ª–æ–≥–≥–µ—Ä–∞:", err);
  }
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ===
async function initDB() {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS my_table (
      id SERIAL PRIMARY KEY,
      token TEXT NOT NULL,
      expires_at TIMESTAMP,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `);

  await pool.query(`
    DO $$
    BEGIN
      BEGIN
        ALTER TABLE my_table ADD COLUMN expires_at TIMESTAMP;
      EXCEPTION WHEN duplicate_column THEN NULL;
      END;
      BEGIN
        ALTER TABLE my_table ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
      EXCEPTION WHEN duplicate_column THEN NULL;
      END;
    END$$;
  `);

  console.log("‚úÖ Database initialized.");
  await removeExpiredTokens();
}

// === –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ ===
async function removeExpiredTokens() {
  const now = new Date();
  const res = await pool.query("DELETE FROM my_table WHERE expires_at <= $1 RETURNING token", [now]);
  for (const row of res.rows) {
    await sendLog("üïí –¢–æ–∫–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—ë–Ω", `–¢–æ–∫–µ–Ω: \`${row.token}\` (–∏—Å—Ç—ë–∫)`, "#808080");
  }
}

// === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
function scheduleTokenDeletion(token, expiresAt) {
  const delay = expiresAt.getTime() - Date.now();
  if (delay <= 0) return;
  setTimeout(async () => {
    await pool.query("DELETE FROM my_table WHERE token=$1", [token]);
    console.log(`üïí Token ${token} expired and deleted.`);
    await sendLog("üïí –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏", `–¢–æ–∫–µ–Ω: \`${token}\``, "#808080");
  }, delay);
}

// === –ü–∞—Ä—Å–µ—Ä –¥–∞—Ç—ã ===
function parseRuDateTime(input) {
  const match = input.match(/^(\d{2})\.(\d{2})\.(\d{4})\s+(\d{2}):(\d{2})$/);
  if (!match) return null;
  const [_, d, m, y, h, min] = match;

  // –°–æ–∑–¥–∞—ë–º –¥–∞—Ç—É —Å —É—á—ë—Ç–æ–º —Ç–≤–æ–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–ö–∏–µ–≤/–ú–æ—Å–∫–≤–∞)
  const date = new Date(`${y}-${m}-${d}T${h}:${min}:00`);
  const localOffset = new Date().getTimezoneOffset() * 60000; // —Å–º–µ—â–µ–Ω–∏–µ –≤ –º—Å
  return new Date(date.getTime() - localOffset);
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ===
client.on("messageCreate", async (message) => {
  if (message.author.bot) return;
  if (message.author.id !== ADMIN_ID) return;

  const args = message.content.trim().split(/\s+/);
  const cmd = args.shift()?.toLowerCase();

  try {
    // === addtoken ===
    if (cmd === "!–≤—ã–¥–∞—Ç—å") {
      const token = args[0];
      const expiresInput = args.slice(1).join(" ");
      if (!token || !expiresInput)
        return message.reply("‚öôÔ∏è –§–æ—Ä–º–∞—Ç: `!–≤—ã–¥–∞—Ç—å <—Ç–æ–∫–µ–Ω> <–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú>`");

      const expiresAt = parseRuDateTime(expiresInput);
      if (!expiresAt)
        return message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: `16.10.2025 23:30`");

      await pool.query("INSERT INTO my_table(token, expires_at) VALUES($1,$2)", [token, expiresAt]);
      scheduleTokenDeletion(token, expiresAt);

      const embed = new EmbedBuilder()
        .setTitle("‚úÖ –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω")
        .setDescription(`\`${token}\`\n–ò—Å—Ç–µ–∫–∞–µ—Ç: **${expiresInput}**`)
        .setColor("#2f3136")
        .setTimestamp();

      await message.reply({ embeds: [embed] });
      await sendLog("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω", `\`${token}\`\n–ò—Å—Ç–µ–∫–∞–µ—Ç: ${expiresInput}\n–î–æ–±–∞–≤–∏–ª: <@${message.author.id}>`);
    }

    // === deltoken ===
    if (cmd === "!–∑–∞–±—Ä–∞—Ç—å") {
      const token = args[0];
      if (!token) return message.reply("‚öôÔ∏è –§–æ—Ä–º–∞—Ç: `!–∑–∞–±—Ä–∞—Ç—å <—Ç–æ–∫–µ–Ω>`");

      const res = await pool.query("DELETE FROM my_table WHERE token=$1", [token]);
      const embed = new EmbedBuilder()
        .setTitle(res.rowCount ? "üóëÔ∏è –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω" : "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω")
        .setDescription(res.rowCount ? `\`${token}\` –±—ã–ª —É–¥–∞–ª—ë–Ω.` : `\`${token}\` –Ω–µ –Ω–∞–π–¥–µ–Ω.`)
        .setColor("#2f3136")
        .setTimestamp();

      await message.reply({ embeds: [embed] });
      await sendLog(res.rowCount ? "üóëÔ∏è –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω" : "‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω",
        `–¢–æ–∫–µ–Ω: \`${token}\`\n–£–¥–∞–ª–∏–ª: <@${message.author.id}>`);
    }

    // === listtokens ===
    if (cmd === "!–ª–∏—Å—Ç") {
      await removeExpiredTokens();
      const res = await pool.query("SELECT token, expires_at FROM my_table ORDER BY id DESC");
      const list = res.rows.length
        ? res.rows.map(r => `‚Ä¢ \`${r.token}\`\n  ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${r.expires_at ? new Date(r.expires_at).toLocaleString("ru-RU") : "‚Äî"}`).join("\n\n")
        : "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.";

      const embed = new EmbedBuilder()
        .setTitle("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤")
        .setDescription(list)
        .setColor("#2f3136")
        .setTimestamp();

      await message.reply({ embeds: [embed] });
      await sendLog("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–∫–µ–Ω–æ–≤", `–ê–¥–º–∏–Ω: <@${message.author.id}> –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤.`);
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã:", err);
    await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.");
  }
});

// === –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===
client.once("ready", async () => {
  console.log(`ü§ñ Logged in as ${client.user.tag}`);
  await sendLog("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", `–î–∞—Ç–∞: ${new Date().toLocaleString("ru-RU")}`);

  const res = await pool.query("SELECT token, expires_at FROM my_table");
  for (const row of res.rows) {
    if (row.expires_at) scheduleTokenDeletion(row.token, new Date(row.expires_at));
  }
});

// === –°–∞–º–æ–ø–∏–Ω–≥ (–¥–ª—è Render) ===
setInterval(() => {
  fetch(`https://adadadadad-97sj.onrender.com/check/1`).catch(() => {});
}, 5 * 60 * 1000);
// === –ó–∞–ø—É—Å–∫ ===
await initDB();
client.login(BOT_TOKEN);
