import {
  Client,
  GatewayIntentBits,
  EmbedBuilder,
  Partials
} from "discord.js";
import { Pool } from "pg";
import express from "express";
import cors from "cors";

const fetch = global.fetch;

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
const BOT_TOKEN = process.env.BOT_TOKEN;
const DATABASE_URL = process.env.DATABASE_URL;
const ADMIN_ID = process.env.ADMIN_ID;
const BASE_URL = process.env.BASE_URL || "https://your-app-name.onrender.com";

if (!BOT_TOKEN || !DATABASE_URL || !ADMIN_ID) {
  console.error("‚ùå BOT_TOKEN, DATABASE_URL –∏ ADMIN_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env");
  process.exit(1);
}

// === –ö–ª–∏–µ–Ω—Ç Discord ===
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.DirectMessages,
    GatewayIntentBits.MessageContent
  ],
  partials: [Partials.Channel]
});

// === Express —Å–µ—Ä–≤–µ—Ä (—á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª) ===
const app = express();
app.use(cors());
app.get("/", (req, res) => res.send("Bot is running..."));
app.listen(process.env.PORT || 3000, () => console.log("‚úÖ Server ready"));

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ===
const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ===
async function initDB() {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS my_table (
      id SERIAL PRIMARY KEY,
      token TEXT NOT NULL,
      expires_at TIMESTAMP,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
  await pool.query(`
    DO $$
    BEGIN
      BEGIN
        ALTER TABLE my_table ADD COLUMN expires_at TIMESTAMP;
      EXCEPTION WHEN duplicate_column THEN NULL;
      END;
      BEGIN
        ALTER TABLE my_table ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
      EXCEPTION WHEN duplicate_column THEN NULL;
      END;
    END$$;
  `);

  console.log("‚úÖ Database initialized.");
  await removeExpiredTokens();
}

// === –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ ===
async function removeExpiredTokens() {
  const now = new Date();
  await pool.query("DELETE FROM my_table WHERE expires_at <= $1", [now]);
}

// === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ===
function scheduleTokenDeletion(token, expiresAt) {
  const delay = expiresAt.getTime() - Date.now();
  if (delay <= 0) return;
  setTimeout(async () => {
    await pool.query("DELETE FROM my_table WHERE token=$1", [token]);
    console.log(`üïí Token ${token} expired and deleted.`);
  }, delay);
}

// === –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã ===
function parseRuDateTime(input) {
  const match = input.match(/^(\d{2})\.(\d{2})\.(\d{4})\s+(\d{2}):(\d{2})$/);
  if (!match) return null;
  const [_, d, m, y, h, min] = match;
  const date = new Date(`${y}-${m}-${d}T${h}:${min}:00`);
  return isNaN(date) ? null : date;
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ ===
client.on("messageCreate", async (message) => {
  if (message.author.bot) return;
  if (message.author.id !== ADMIN_ID) return; // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
  if (!message.content.startsWith("addtoken") &&
      !message.content.startsWith("deltoken") &&
      !message.content.startsWith("listtokens")) return;

  const args = message.content.trim().split(/\s+/);
  const cmd = args.shift().toLowerCase();

  try {
    // === addtoken ===
    if (cmd === "addtoken") {
      const token = args[0];
      const expiresInput = args.slice(1).join(" ");
      if (!token || !expiresInput)
        return message.reply("‚öôÔ∏è –§–æ—Ä–º–∞—Ç: `addtoken <—Ç–æ–∫–µ–Ω> <–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú>`");

      const expiresAt = parseRuDateTime(expiresInput);
      if (!expiresAt)
        return message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: `16.10.2025 23:30`");

      await pool.query("INSERT INTO my_table(token, expires_at) VALUES($1,$2)", [token, expiresAt]);
      scheduleTokenDeletion(token, expiresAt);

      const embed = new EmbedBuilder()
        .setTitle("‚úÖ –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω")
        .setDescription(`\`${token}\`\n–ò—Å—Ç–µ–∫–∞–µ—Ç: **${expiresInput}**`)
        .setColor("#2f3136")
        .setTimestamp();

      await message.reply({ embeds: [embed] });
    }

    // === deltoken ===
    if (cmd === "deltoken") {
      const token = args[0];
      if (!token) return message.reply("‚öôÔ∏è –§–æ—Ä–º–∞—Ç: `deltoken <—Ç–æ–∫–µ–Ω>`");

      const res = await pool.query("DELETE FROM my_table WHERE token=$1", [token]);
      const embed = new EmbedBuilder()
        .setTitle(res.rowCount ? "üóëÔ∏è –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω" : "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω")
        .setDescription(res.rowCount ? `\`${token}\` –±—ã–ª —É–¥–∞–ª—ë–Ω.` : `\`${token}\` –Ω–µ –Ω–∞–π–¥–µ–Ω.`)
        .setColor("#2f3136")
        .setTimestamp();

      await message.reply({ embeds: [embed] });
    }

    // === listtokens ===
    if (cmd === "listtokens") {
      await removeExpiredTokens();
      const res = await pool.query("SELECT token, expires_at FROM my_table ORDER BY id DESC");
      const list = res.rows.length
        ? res.rows.map(r => `‚Ä¢ \`${r.token}\`\n  ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${r.expires_at ? new Date(r.expires_at).toLocaleString("ru-RU") : "‚Äî"}`).join("\n\n")
        : "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.";

      const embed = new EmbedBuilder()
        .setTitle("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤")
        .setDescription(list)
        .setColor("#2f3136")
        .setTimestamp();

      await message.reply({ embeds: [embed] });
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã:", err);
    await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.");
  }
});

// === –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===
client.once("ready", async () => {
  console.log(`ü§ñ Logged in as ${client.user.tag}`);

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
  const res = await pool.query("SELECT token, expires_at FROM my_table");
  for (const row of res.rows) {
    if (row.expires_at) scheduleTokenDeletion(row.token, new Date(row.expires_at));
  }
});

// === –°–∞–º–æ–ø–∏–Ω–≥ Render ===
setInterval(() => {
  fetch("https://adadadadad-97sj.onrender.com/check/1").catch(() => {});
}, 5 * 60 * 1000);

// === –ó–∞–ø—É—Å–∫ ===
await initDB();
client.login(BOT_TOKEN);

