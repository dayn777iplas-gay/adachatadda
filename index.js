import {
  Client,
  GatewayIntentBits,
  EmbedBuilder,
  Partials
} from "discord.js";
import { Pool } from "pg";
import express from "express";
import cors from "cors";

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
const BOT_TOKEN = process.env.BOT_TOKEN;
const DATABASE_URL = process.env.DATABASE_URL;
const ADMIN_ID = process.env.ADMIN_ID;

const LOG_WEBHOOK_URL = "https://discord.com/api/webhooks/1427826300495855697/MtqkHw-X8jm7l8kbIxeVJHvBNcIPufZtxssqd2-wyljCggs9lGi4SMZZivbSckSw7xTU";

if (!BOT_TOKEN || !DATABASE_URL || !ADMIN_ID) {
  console.error("‚ùå BOT_TOKEN, DATABASE_URL –∏ ADMIN_ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!");
  process.exit(1);
}

const fetch = global.fetch;

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ PostgreSQL ===
const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// === Discord –∫–ª–∏–µ–Ω—Ç ===
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.DirectMessages,
    GatewayIntentBits.MessageContent
  ],
  partials: [Partials.Channel]
});

// === Express ===
const app = express();
app.use(cors());
app.use(express.json());
app.get("/", (req, res) => res.send("Bot is running..."));

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ ===
app.get("/check/:token", async (req, res) => {
  const ip = req.headers["x-forwarded-for"] || req.socket.remoteAddress;
  try {
    const token = req.params.token;
    const result = await pool.query("SELECT 1 FROM my_table WHERE token=$1", [token]);
    const valid = result.rowCount > 0;
    res.json({ valid });

    if (token !== "1") {
      await sendLog(
        "üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞",
        `–¢–æ–∫–µ–Ω: \`${token}\`\nIP: ${ip}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: **${valid ? "‚úÖ true" : "‚ùå false"}**`
      );
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", err);
    res.status(500).json({ error: "DB error" });
  }
});

// === –û—Å–Ω–æ–≤–Ω–æ–π JS ===
app.post("/run", async (req, res) => {
  try {
    const { token } = req.body;
    if (!token) return res.status(400).send("// –¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω");
    const result = await pool.query("SELECT 1 FROM my_table WHERE token=$1", [token]);
    const valid = result.rowCount > 0;
    if (!valid) return res.status(403).send("// –ö–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π");

    const scriptUrl = "https://bondyuk777.github.io/-/dadwadfafaf.js";
    const response = await fetch(scriptUrl);
    if (!response.ok) return res.status(500).send("// –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞");
    const jsCode = await response.text();
    res.setHeader("Content-Type", "application/javascript");
    res.send(jsCode);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ /run:", err);
    res.status(500).send("// –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }
});

// === –õ–æ–≥–≥–µ—Ä ===
async function sendLog(title, description, color = "#2f3136") {
  try {
    const embed = {
      title,
      description,
      color: parseInt(color.replace("#", ""), 16),
      timestamp: new Date().toISOString()
    };
    await fetch(LOG_WEBHOOK_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ embeds: [embed] })
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ª–æ–≥–≥–µ—Ä–∞:", err);
  }
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ===
async function initDB() {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS my_table (
      id SERIAL PRIMARY KEY,
      token TEXT UNIQUE NOT NULL,
      expires_at TIMESTAMP,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `);

  await pool.query(`
    CREATE TABLE IF NOT EXISTS promos (
      id SERIAL PRIMARY KEY,
      user_id TEXT NOT NULL,
      discount INTEGER NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `);

  console.log("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã");
}

// === –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ ===
async function removeExpiredTokens() {
  const now = new Date();
  const res = await pool.query("DELETE FROM my_table WHERE expires_at <= $1 RETURNING token", [now]);
  for (const row of res.rows) {
    await sendLog("üïí –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω (–∏—Å—Ç—ë–∫)", `\`${row.token}\``);
  }
}

// === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
function scheduleTokenDeletion(token, expiresAt) {
  const delay = expiresAt.getTime() - Date.now();
  if (delay <= 0) return;
  setTimeout(async () => {
    await pool.query("DELETE FROM my_table WHERE token=$1", [token]);
    console.log(`üïí Token ${token} —É–¥–∞–ª—ë–Ω (—Å—Ä–æ–∫ –∏—Å—Ç—ë–∫)`);
    await sendLog("üïí –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏", `\`${token}\``);
  }, delay);
}

// === –ö–æ–º–∞–Ω–¥—ã Discord ===
client.on("messageCreate", async (message) => {
  if (message.author.bot) return;

  const args = message.content.trim().split(/\s+/);
  const cmd = args.shift()?.toLowerCase();

  try {
    // === !–ø—Ä–æ–º–æ (–¥–ª—è –≤—Å–µ—Ö)
    if (cmd === "!–ø—Ä–æ–º–æ") {
      const userId = message.author.id;
      const lastSpin = await pool.query(
        `SELECT created_at FROM promos WHERE user_id=$1 ORDER BY created_at DESC LIMIT 1`,
        [userId]
      );

      if (lastSpin.rowCount > 0) {
        const lastTime = new Date(lastSpin.rows[0].created_at);
        const diffMs = Date.now() - lastTime.getTime();
        const diffHours = diffMs / (1000 * 60 * 60);
        if (diffHours < 24) {
          const remaining = (24 - diffHours).toFixed(1);
          await message.reply(`‚è∞ –¢—ã —É–∂–µ –∫—Ä—É—Ç–∏–ª –∫–æ–ª–µ—Å–æ –Ω–µ–¥–∞–≤–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ **${remaining} —á.**`);
          return;
        }
      }

      const spinningMsg = await message.reply("üé° –ö–æ–ª–µ—Å–æ –∫—Ä—É—Ç–∏—Ç—Å—è...");
      const wait = (ms) => new Promise((res) => setTimeout(res, ms));

      const spinTexts = ["üé° –ö–æ–ª–µ—Å–æ –∫—Ä—É—Ç–∏—Ç—Å—è...", "üéØ –ü–æ—á—Ç–∏...", "‚ú® –û—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å!"];
      for (const text of spinTexts) {
        await wait(1000);
        await spinningMsg.edit(text);
      }

      const chance = Math.random();
      if (chance > 0.10) {
        await wait(500);
        await spinningMsg.edit("üò¢ –£–≤—ã, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞!");
        return;
      }

      const discount = Math.floor(Math.random() * (60 - 5 + 1)) + 5;
      await pool.query("INSERT INTO promos (user_id, discount) VALUES ($1, $2)", [userId, discount]);

      await wait(500);
      await spinningMsg.edit({
        embeds: [
          new EmbedBuilder()
            .setTitle("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!")
            .setDescription(`–¢—ã –≤—ã–∏–≥—Ä–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ **${discount}%** —Å–∫–∏–¥–∫—É!\n\n–ö—Ä—É—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.`)
            .setColor("#00ff88")
        ]
      });

      await sendLog("üéÅ –ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥", `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <@${userId}>\n–°–∫–∏–¥–∫–∞: **${discount}%**`);
      return;
    }

    // === !–ø—Ä–æ—Ñ–∏–ª—å (–¥–ª—è –≤—Å–µ—Ö)
    if (cmd === "!–ø—Ä–æ—Ñ–∏–ª—å") {
      const userId = message.author.id;
      const res = await pool.query(
        "SELECT discount, created_at FROM promos WHERE user_id=$1 ORDER BY id DESC",
        [userId]
      );

      if (res.rowCount === 0) {
        await message.reply("üßç –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.");
        return;
      }

      const list = res.rows
        .map((r, i) => `#${i + 1} ‚Äî **${r.discount}%** (–æ—Ç ${new Date(r.created_at).toLocaleString("ru-RU")})`)
        .join("\n");

      const embed = new EmbedBuilder()
        .setTitle(`üìú –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ ${message.author.username}`)
        .setDescription(`–¢–≤–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n${list}`)
        .setColor("#2f3136");

      await message.reply({ embeds: [embed] });
      return;
    }

    // === –ù–∏–∂–µ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN_ID ===
    if (message.author.id !== ADMIN_ID) return;

    // === !–≤—ã–¥–∞—Ç—å ===
    if (cmd === "!–≤—ã–¥–∞—Ç—å") {
      const token = args[0];
      if (!token) return message.reply("‚öôÔ∏è –§–æ—Ä–º–∞—Ç: `!–≤—ã–¥–∞—Ç—å <—Ç–æ–∫–µ–Ω>`");

      const expiresAt = new Date();
      expiresAt.setMonth(expiresAt.getMonth() + 1);

      try {
        const insertRes = await pool.query(
          "INSERT INTO my_table(token, expires_at) VALUES($1,$2) RETURNING id, token, expires_at;",
          [token, expiresAt]
        );

        const row = insertRes.rows[0];
        await message.reply({
          embeds: [
            new EmbedBuilder()
              .setTitle("‚úÖ –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω")
              .setDescription(`\`${row.token}\`\nID: ${row.id}\n–ò—Å—Ç–µ–∫–∞–µ—Ç: ${new Date(row.expires_at).toLocaleString("ru-RU")}`)
              .setColor("#2f3136")
          ]
        });
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ INSERT:", err);
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: " + err.message);
      }
    }

    // === !–ª–∏—Å—Ç ===
    if (cmd === "!–ª–∏—Å—Ç") {
      await removeExpiredTokens();
      const res = await pool.query("SELECT token, expires_at FROM my_table ORDER BY id DESC");
      const list = res.rows.length
        ? res.rows.map(r => `‚Ä¢ \`${r.token}\` ‚Äî –∏—Å—Ç–µ–∫–∞–µ—Ç ${new Date(r.expires_at).toLocaleString("ru-RU")}`).join("\n")
        : "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.";
      const embed = new EmbedBuilder()
        .setTitle("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤")
        .setDescription(list)
        .setColor("#2f3136");
      await message.reply({ embeds: [embed] });
    }

    // === !—É–¥–∞–ª–∏—Ç—å ===
    if (cmd === "!—É–¥–∞–ª–∏—Ç—å") {
      const token = args[0];
      if (!token) return message.reply("‚öôÔ∏è –§–æ—Ä–º–∞—Ç: `!—É–¥–∞–ª–∏—Ç—å <—Ç–æ–∫–µ–Ω>`");
      const res = await pool.query("DELETE FROM my_table WHERE token=$1", [token]);
      message.reply(res.rowCount ? "üóëÔ∏è –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω" : "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω");
    }

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã:", err);
    message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.");
  }
});

// === –ó–∞–ø—É—Å–∫ ===
client.once("ready", async () => {
  console.log(`ü§ñ Logged in as ${client.user.tag}`);
  await initDB();
  await removeExpiredTokens();
});

// === –°–∞–º–æ–ø–∏–Ω–≥ ===
setInterval(() => {
  fetch("https://adadadadad-97sj.onrender.com/check/1").catch(() => {});
}, 5 * 60 * 1000);

app.listen(process.env.PORT || 3000, () => console.log("‚úÖ Server ready"));
client.login(BOT_TOKEN);
